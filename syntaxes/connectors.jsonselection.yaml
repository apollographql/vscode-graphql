# Run `npm run watch:textmate-yaml` while working on this file.
# based on https://github.com/apollographql/router/blob/b0a89c223bb5813239474b336cf335ab4fb586cb/apollo-federation/src/sources/connect/json_selection/README.md
$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: "Apollo Connectors Mapping Syntax"
scopeName: "source.apollo.connectors.mapping"
patterns:
  - include: "#JSONSelection"
  - include: "source.graphql#graphql-skip-newlines"
variables:
  identifier: "[a-zA-Z_][0-9a-zA-Z_]*"
  # prettier-ignore
  string: "(?:\"[^\"]*\"|'[^']*')"
  key: "(?:{{identifier}}|{{string}})"
  operator: "(?:[?][?]|[?][!]|&&|[|][|]|==|!=|<|<=|(?<!-)>|(?<!-)>=|[+]|-(?!>)|[*]|/|%)"
  operatorCharacter: "[?!&|=<>*/%+-]"
  alias: "{{key}}\\s*:"
  varPathMatch: "[$]"
  keyPathMatch: "({{key}})(?={{pathTailMatch}})"
  pathStepMatch: "(?:[.]{{key}}|->{{identifier}})"
  pathTailMatch: "\\s*(?:[?])?(?=\\s*{{pathStepMatch}})"
  atPathMatch: "@"
  exprPathMatch: "$[(]"
repository:
  # JSONSelection        ::= PathSelection | NamedSelection*
  JSONSelection:
    patterns:
      - include: "#NamedSelection"
      - include: "#PathSelection"
      - include: "#Comment"
  # SubSelection         ::= "{" NamedSelection* "}"
  SubSelection:
    begin: "\\s*({)"
    beginCaptures:
      "1":
        name: "punctuation.selection.open"
    end: "\\s*(})"
    endCaptures:
      "1":
        name: "punctuation.selection.close"
    patterns:
      - include: "#NamedSelection"
      - include: "#Comment"
  # NamedSelection       ::= (Alias | "...")? PathSelection | Alias SubSelection
  # Alias                ::= Key ":"
  # Path                 ::= VarPath | KeyPath | AtPath | ExprPath
  # PathSelection        ::= Path SubSelection?
  PathSelection:
    begin: "(?={{varPathMatch}}|{{keyPathMatch}}|{{atPathMatch}}|{{exprPathMatch}})"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - include: "#ExprPath" # needs higher priority that `VarPath`
      - include: "#VarPath"
      - include: "#KeyPath"
      - include: "#AtPath"
  NamedSelection:
    patterns:
      - begin: "({{key}})\\s*(:)\\s*{{#PathSelection.begin}}"
        beginCaptures:
          "1":
            name: "variable.selection.alias.identifier"
          "2":
            name: "punctuation.colon.alias"
        end: "(?=.)"
        applyEndPatternLast: 1
        patterns:
          - include: "#PathSelection"
      - begin: "([.][.][.])\\s*{{#PathSelection.begin}}"
        beginCaptures:
          "1":
            name: "keyword.operator.spread"
        end: "(?=.)"
        applyEndPatternLast: 1
        patterns:
          - include: "#PathSelection"
      - include: "#PathSelection"
      - begin: "({{key}})\\s*(:)\\s*(?={{#SubSelection.begin}})"
        beginCaptures:
          "1":
            name: "variable.selection.alias.identifier"
          "2":
            name: "punctuation.colon.alias"
        end: "(?=.)"
        applyEndPatternLast: 1
        patterns:
          - include: "#SubSelection"
      # added back even though it's not part of the current spec: NamedFieldSelection
      - include: "#NamedFieldSelection"
  # temporarily added back
  # NamedFieldSelection  ::= Alias? Key SubSelection?
  NamedFieldSelection:
    begin: "(?:({{key}})\\s*(:)\\s*)?({{key}})"
    beginCaptures:
      "1":
        name: "variable.selection.alias.identifier"
      "2":
        name: "punctuation.colon.alias"
      "3":
        name: "variable.selection.field.identifier"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - include: "#SubSelection"
  # VarPath              ::= "$" (NO_SPACE Identifier)? PathTail
  VarPath:
    begin: "([$])({{identifier}})?(?!\\w)"
    beginCaptures:
      "1":
        name: "variable.language.path.dollar"
      "2":
        name: "variable.language.path.identifier"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - include: "#PathTail"
  # KeyPath              ::= Key NonEmptyPathTail
  KeyPath:
    begin: "({{key}})(?={{pathTailMatch}})"
    beginCaptures:
      "1":
        name: "variable.path.key.identifier"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      # "nonEmpty" part already covered through `(?={{pathTailMatch}})` in `begin`
      #- include: "#NonEmptyPathTail"
      - include: "#PathTail"
  # AtPath               ::= "@" PathTail
  AtPath:
    begin: "(@)"
    beginCaptures:
      "1":
        name: "variable.language.path.at"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - include: "#PathTail"
  # ExprPath             ::= "$(" LitExpr ")" PathTail
  ExprPath:
    begin: "([$])(?=[(])"
    beginCaptures:
      "1":
        name: "variable.language.path.dollar"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - begin: "([(])"
        beginCaptures:
          "1":
            name: "punctuation.brace.round.args.open"
        end: "([)])"
        endCaptures:
          "1":
            name: "punctuation.brace.round.args.close"
        patterns:
          - include: "#LitExpr"
      - include: "#PathStep"
  # PathTail             ::= "?"? (PathStep "?"?)*
  # optional chaining moved into `PathStep` later
  PathTail:
    begin: "([?])?(?=\\s*{{pathStepMatch}})"
    beginCaptures:
      "1":
        name: "variable.question.mark"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - include: "#PathStep"
  # NonEmptyPathTail     ::= "?"? (PathStep "?"?)+
  # PathStep             ::= "." Key | "->" Identifier MethodArgs?
  # changed to and added optional chaining that would usually live in `PathTail`|`NonEmptyPathTail`:
  # PathStepDotAccess    ::= "." Key "?"?
  # PathStepArrowMethodArgs ::= "->" Identifier MethodArgs "?"?
  # PathStepArrowAccess  ::= "->" Identifier "?"?
  # PathStep             ::= PathStepDotAccess | PathStepArrowMethodArgs | PathStepArrowAccess
  PathStepDotAccess:
    match: "([.])({{key}})([?]?)"
    captures:
      "1":
        name: "variable.dot"
      "2":
        name: "variable.key.identifier"
      "3":
        name: "variable.question.mark"
  PathStepArrowMethodArgs:
    begin: "(->)({{identifier}})([(])"
    end: "([)])([?]?)"
    applyEndPatternLast: 1
    beginCaptures:
      "1":
        name: "punctuation.arrow"
      "2":
        name: "variable.identifier"
      "3":
        name: "punctuation.brace.round.args.open"
    endCaptures:
      "1":
        name: "punctuation.brace.round.args.close"
      "2":
        name: "variable.question.mark"
    patterns:
      - include: "#LitExpr"
      - match: ","
        name: "punctuation.comma.args.separator"
  PathStepArrowAccess:
    match: "(->)({{identifier}})([?]?)"
    captures:
      "1":
        name: "punctuation.arrow"
      "2":
        name: "variable.key.identifier"
      "3":
        name: "variable.question.mark"
  PathStep:
    patterns:
      - include: "#PathStepDotAccess"
      - include: "#PathStepArrowMethodArgs"
      - include: "#PathStepArrowAccess"
  # Key (in variables)                 ::= Identifier | LitString
  # Identifier (in variables)          ::= [a-zA-Z_] NO_SPACE [0-9a-zA-Z_]*
  # MethodArgs (inlined into PathStepArrowMethodArgs)            ::= "(" (LitExpr ("," LitExpr)* ","?)? ")"
  # LitExpr              ::= LitPath | LitOpChain | LitPrimitive | LitObject | LitArray | PathSelection
  LitExpr:
    patterns:
      # - include: "#LitOpChain"
      - include: "#LitOpChainCenter"
      # - include: "#LitPath"
      - include: "#LitPathTail"
      - include: "#LitPrimitive"
      - include: "#LitObject"
      - include: "#LitArray"
      - include: "#PathSelection"
  # LitPath              ::= (LitPrimitive | LitObject | LitArray) NonEmptyPathTail
  # changed to
  # LitPathTail              ::= NonEmptyPathTail
  # but ensures that it's not the first `LitExpr` by doing a negative lookbehind for `(`, which would indicate we're the first entry in a `ExprPath`.
  LitPathTail:
    begin: "(?<![(])(?={{pathTailMatch}})"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      # "nonEmpty" part already covered through `(?={{pathTailMatch}})` in `begin`
      #- include: "#NonEmptyPathTail"
      - include: "#PathTail"
  # LitOpChain           ::= LitExpr LitOp LitExpr
  # changed to
  # LitOpChainCenter          ::= LitOp
  # as `MethodArgs` might match `LitExpr` more than once anyways.
  # Does lookarounds to ensure that it's in the middle of an expression, i.e. not at the start or end.
  LitOpChainCenter:
    match: "(?<![(]|{{operatorCharacter}})({{operator}})(?!\\s*(?:{{operatorCharacter}}|[)]))"
    captures:
      "1":
        name: "keyword.operator"
  # LitPrimitive         ::= LitString | LitNumber | "true" | "false" | "null"
  LitPrimitive:
    patterns:
      - include: "#LitString"
      - include: "#LitNumber"
      - match: "\\b(true|false|null)\\b"
        name: "constant.language.LitPrimitive"
  # LitString            ::= "'" ("\\'" | [^'])* "'" | '"' ('\\"' | [^"])* '"'
  LitString:
    name: "string.quoted"
    # prettier-ignore
    match: "(\")([^\"]*)(\")|(')([^']*)(')"
    captures:
      "1":
        name: "punctuation.definition.string.begin.graphql"
      "2":
        name: "string.quoted.double.graphql"
      "3":
        name: "punctuation.definition.string.end.graphql"
      "4":
        name: "punctuation.definition.string.begin.graphql"
      "5":
        name: "string.quoted.single.graphql"
      "6":
        name: "punctuation.definition.string.end.graphql"
  # LitNumber            ::= "-"? ([0-9]+ ("." [0-9]*)? | "." [0-9]+)
  LitNumber:
    name: "constant.numeric"
    match: "(-?)([0-9]+([.][0-9]*)?|[.][0-9]+)"
  # LitObject            ::= "{" (LitProperty ("," LitProperty)* ","?)? "}"
  LitObject:
    begin: "\\s*({)"
    beginCaptures:
      "1":
        name: "punctuation.object.open"
    end: "\\s*(})"
    endCaptures:
      "1":
        name: "punctuation.object.close"
    patterns:
      - include: "#LitProperty"
      - match: ","
        name: "punctuation.comma.object.separator"
  # LitProperty          ::= Key ":" LitExpr
  LitProperty:
    begin: "\\b({{identifier}})\\s*(:)\\s*"
    beginCaptures:
      "1":
        name: "variable.property.key"
      "2":
        name: "punctuation.colon.property"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - include: "#LitExpr"
  # LitArray             ::= "[" (LitExpr ("," LitExpr)* ","?)? "]"
  LitArray:
    begin: "\\s*(\\[)"
    beginCaptures:
      "1":
        name: "punctuation.array.open"
    end: "\\s*(\\])"
    endCaptures:
      "1":
        name: "punctuation.array.close"
    patterns:
      - include: "#LitExpr"
      - match: ","
        name: "punctuation.comma.array.separator"
  # LitOp                ::= "??" | "?!" | "&&" | "||" | "==" | "!=" | "<" | "<=" | ">" | ">=" | +" | "-" | "*" | "/" | "%"
  # inlined into `LitOpChainCenter`
  # NO_SPACE             ::= !SpacesOrComments
  # SpacesOrComments     ::= (Spaces | Comment)+
  # Spaces               ::= ("⎵" | "\t" | "\r" | "\n")+
  # Comment              ::= "#" [^\n]*
  Comment:
    name: "comment.line.jsonselection"
    match: "(\\s*)(#).*"
    captures:
      "1":
        name: "punctuation.whitespace.comment.leading.jsonselection"

  # additional rules used for strings, e.g. in `POST: "/foo/bar/{$id}"`
  JSONSelectionString:
    contentName: string.quoted
    begin: '(("))'
    beginCaptures:
      "1":
        name: "string.quoted.double.graphql"
      "2":
        name: "punctuation.definition.string.begin.graphql"
    end: '(("))'
    endCaptures:
      "1":
        name: "string.quoted.double.graphql"
      "2":
        name: "punctuation.definition.string.end.graphql"
    patterns:
      - begin: "\\s*({)"
        contentName: "embedded"
        debugName: "embedded"
        beginCaptures:
          "1":
            name: "punctuation.embedded.open"
        end: "\\s*(})"
        endCaptures:
          "1":
            name: "punctuation.embedded.close"
        patterns:
          - include: "#PathSelection"
