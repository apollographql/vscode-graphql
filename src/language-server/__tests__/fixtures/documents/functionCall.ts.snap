>// hint for reading the snapshots generated by this file:
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>// it is important to check that a rule doesn't only enter `meta.embedded.block.graphql`
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>// but also leaves it again
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>
>declare function gql<A = any, B = any>(arg: string, ...args: any[]): void;
#^^^^^^^ source.ts meta.function.ts storage.modifier.ts
#       ^ source.ts meta.function.ts
#        ^^^^^^^^ source.ts meta.function.ts storage.type.function.ts
#                ^ source.ts meta.function.ts
#                 ^^^ source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts
#                    ^ source.ts meta.function.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
#                     ^ source.ts meta.function.ts meta.type.parameters.ts entity.name.type.ts
#                      ^ source.ts meta.function.ts meta.type.parameters.ts
#                       ^ source.ts meta.function.ts meta.type.parameters.ts keyword.operator.assignment.ts
#                        ^ source.ts meta.function.ts meta.type.parameters.ts
#                         ^^^ source.ts meta.function.ts meta.type.parameters.ts support.type.primitive.ts
#                            ^ source.ts meta.function.ts meta.type.parameters.ts punctuation.separator.comma.ts
#                             ^ source.ts meta.function.ts meta.type.parameters.ts
#                              ^ source.ts meta.function.ts meta.type.parameters.ts entity.name.type.ts
#                               ^ source.ts meta.function.ts meta.type.parameters.ts
#                                ^ source.ts meta.function.ts meta.type.parameters.ts keyword.operator.assignment.ts
#                                 ^ source.ts meta.function.ts meta.type.parameters.ts
#                                  ^^^ source.ts meta.function.ts meta.type.parameters.ts support.type.primitive.ts
#                                     ^ source.ts meta.function.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
#                                      ^ source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
#                                       ^^^ source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
#                                          ^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
#                                           ^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts
#                                            ^^^^^^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts support.type.primitive.ts
#                                                  ^ source.ts meta.function.ts meta.parameters.ts punctuation.separator.parameter.ts
#                                                   ^ source.ts meta.function.ts meta.parameters.ts
#                                                    ^^^ source.ts meta.function.ts meta.parameters.ts keyword.operator.rest.ts
#                                                       ^^^^ source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
#                                                           ^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
#                                                            ^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts
#                                                             ^^^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts support.type.primitive.ts
#                                                                ^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts meta.type.tuple.ts meta.brace.square.ts
#                                                                 ^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts meta.type.tuple.ts meta.brace.square.ts
#                                                                  ^ source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.end.ts
#                                                                   ^ source.ts meta.function.ts meta.return.type.ts keyword.operator.type.annotation.ts
#                                                                    ^ source.ts meta.function.ts meta.return.type.ts
#                                                                     ^^^^ source.ts meta.function.ts meta.return.type.ts support.type.primitive.ts
#                                                                         ^ source.ts punctuation.terminator.statement.ts
>declare function foo<A = any, B = any>(...args: any[]): void;
#^^^^^^^ source.ts meta.function.ts storage.modifier.ts
#       ^ source.ts meta.function.ts
#        ^^^^^^^^ source.ts meta.function.ts storage.type.function.ts
#                ^ source.ts meta.function.ts
#                 ^^^ source.ts meta.function.ts meta.definition.function.ts entity.name.function.ts
#                    ^ source.ts meta.function.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
#                     ^ source.ts meta.function.ts meta.type.parameters.ts entity.name.type.ts
#                      ^ source.ts meta.function.ts meta.type.parameters.ts
#                       ^ source.ts meta.function.ts meta.type.parameters.ts keyword.operator.assignment.ts
#                        ^ source.ts meta.function.ts meta.type.parameters.ts
#                         ^^^ source.ts meta.function.ts meta.type.parameters.ts support.type.primitive.ts
#                            ^ source.ts meta.function.ts meta.type.parameters.ts punctuation.separator.comma.ts
#                             ^ source.ts meta.function.ts meta.type.parameters.ts
#                              ^ source.ts meta.function.ts meta.type.parameters.ts entity.name.type.ts
#                               ^ source.ts meta.function.ts meta.type.parameters.ts
#                                ^ source.ts meta.function.ts meta.type.parameters.ts keyword.operator.assignment.ts
#                                 ^ source.ts meta.function.ts meta.type.parameters.ts
#                                  ^^^ source.ts meta.function.ts meta.type.parameters.ts support.type.primitive.ts
#                                     ^ source.ts meta.function.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
#                                      ^ source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
#                                       ^^^ source.ts meta.function.ts meta.parameters.ts keyword.operator.rest.ts
#                                          ^^^^ source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
#                                              ^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
#                                               ^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts
#                                                ^^^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts support.type.primitive.ts
#                                                   ^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts meta.type.tuple.ts meta.brace.square.ts
#                                                    ^ source.ts meta.function.ts meta.parameters.ts meta.type.annotation.ts meta.type.tuple.ts meta.brace.square.ts
#                                                     ^ source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.end.ts
#                                                      ^ source.ts meta.function.ts meta.return.type.ts keyword.operator.type.annotation.ts
#                                                       ^ source.ts meta.function.ts meta.return.type.ts
#                                                        ^^^^ source.ts meta.function.ts meta.return.type.ts support.type.primitive.ts
#                                                            ^ source.ts punctuation.terminator.statement.ts
>declare type SomeResult = any;
#^^^^^^^ source.ts meta.type.declaration.ts storage.modifier.ts
#       ^ source.ts meta.type.declaration.ts
#        ^^^^ source.ts meta.type.declaration.ts storage.type.type.ts
#            ^ source.ts meta.type.declaration.ts
#             ^^^^^^^^^^ source.ts meta.type.declaration.ts entity.name.type.alias.ts
#                       ^ source.ts meta.type.declaration.ts
#                        ^ source.ts meta.type.declaration.ts keyword.operator.assignment.ts
#                         ^ source.ts meta.type.declaration.ts
#                          ^^^ source.ts meta.type.declaration.ts support.type.primitive.ts
#                             ^ source.ts punctuation.terminator.statement.ts
>declare type SomeVariables = any;
#^^^^^^^ source.ts meta.type.declaration.ts storage.modifier.ts
#       ^ source.ts meta.type.declaration.ts
#        ^^^^ source.ts meta.type.declaration.ts storage.type.type.ts
#            ^ source.ts meta.type.declaration.ts
#             ^^^^^^^^^^^^^ source.ts meta.type.declaration.ts entity.name.type.alias.ts
#                          ^ source.ts meta.type.declaration.ts
#                           ^ source.ts meta.type.declaration.ts keyword.operator.assignment.ts
#                            ^ source.ts meta.type.declaration.ts
#                             ^^^ source.ts meta.type.declaration.ts support.type.primitive.ts
#                                ^ source.ts punctuation.terminator.statement.ts
>
>// for comparison - this is what a normal function all is colored
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>foo(`query Foo { test }`);
#^^^ source.ts meta.function-call.ts entity.name.function.ts
#   ^ source.ts meta.brace.round.ts
#    ^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
#     ^^^^^^^^^^^^^^^^^^ source.ts string.template.ts
#                       ^ source.ts string.template.ts punctuation.definition.string.template.end.ts
#                        ^ source.ts meta.brace.round.ts
#                         ^ source.ts punctuation.terminator.statement.ts
>
>// if possible, these should look the same
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>foo("notATemplate");
#^^^ source.ts meta.function-call.ts entity.name.function.ts
#   ^ source.ts meta.brace.round.ts
#    ^ source.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#     ^^^^^^^^^^^^ source.ts string.quoted.double.ts
#                 ^ source.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                  ^ source.ts meta.brace.round.ts
#                   ^ source.ts punctuation.terminator.statement.ts
>gql("notATemplate");
#^^^ source.ts meta.function-call.ts entity.name.function.ts
#   ^ source.ts meta.brace.round.ts
#    ^ source.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#     ^^^^^^^^^^^^ source.ts string.quoted.double.ts
#                 ^ source.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                  ^ source.ts meta.brace.round.ts
#                   ^ source.ts punctuation.terminator.statement.ts
>foo<"">("notATemplate");
#^^^ source.ts meta.function-call.ts entity.name.function.ts
#   ^ source.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
#    ^ source.ts meta.type.parameters.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#     ^ source.ts meta.type.parameters.ts string.quoted.double.ts punctuation.definition.string.end.ts
#      ^ source.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
#       ^ source.ts meta.brace.round.ts
#        ^ source.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#         ^^^^^^^^^^^^ source.ts string.quoted.double.ts
#                     ^ source.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                      ^ source.ts meta.brace.round.ts
#                       ^ source.ts punctuation.terminator.statement.ts
>gql<"">("notATemplate");
#^^^ source.ts meta.function-call.ts entity.name.function.ts
#   ^ source.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
#    ^ source.ts meta.type.parameters.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#     ^ source.ts meta.type.parameters.ts string.quoted.double.ts punctuation.definition.string.end.ts
#      ^ source.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
#       ^ source.ts meta.brace.round.ts
#        ^ source.ts string.quoted.double.ts punctuation.definition.string.begin.ts
#         ^^^^^^^^^^^^ source.ts string.quoted.double.ts
#                     ^ source.ts string.quoted.double.ts punctuation.definition.string.end.ts
#                      ^ source.ts meta.brace.round.ts
#                       ^ source.ts punctuation.terminator.statement.ts
>
>// prettier-ignore
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>gql(`query Q1($arg: String!) { test }`)
#^^^^^ source.ts
#     ^^^^^ source.ts meta.embedded.block.graphql keyword.operation.graphql
#          ^ source.ts meta.embedded.block.graphql
#           ^^ source.ts meta.embedded.block.graphql entity.name.function.graphql
#             ^ source.ts meta.embedded.block.graphql meta.brace.round.graphql
#              ^^^^ source.ts meta.embedded.block.graphql meta.variables.graphql variable.parameter.graphql
#                  ^ source.ts meta.embedded.block.graphql meta.variables.graphql punctuation.colon.graphql
#                   ^ source.ts meta.embedded.block.graphql meta.variables.graphql
#                    ^^^^^^ source.ts meta.embedded.block.graphql meta.variables.graphql support.type.builtin.graphql
#                          ^ source.ts meta.embedded.block.graphql meta.variables.graphql keyword.operator.nulltype.graphql
#                           ^ source.ts meta.embedded.block.graphql meta.brace.round.graphql
#                            ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                             ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                              ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                               ^^^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql variable.graphql
#                                   ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                                    ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                                     ^^ source.ts
>
>// prettier-ignore
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>gql<SomeResult, SomeVariables>(`query Q2 { test }`)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ts
#                                ^^^^^ source.ts meta.embedded.block.graphql keyword.operation.graphql
#                                     ^ source.ts meta.embedded.block.graphql
#                                      ^^ source.ts meta.embedded.block.graphql entity.name.function.graphql
#                                        ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                                         ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                                          ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                                           ^^^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql variable.graphql
#                                               ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                                                ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                                                 ^^ source.ts
>
>// prettier-ignore
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>gql  (  `query Q3 { test }` )
#^^^^^^^^^ source.ts
#         ^^^^^ source.ts meta.embedded.block.graphql keyword.operation.graphql
#              ^ source.ts meta.embedded.block.graphql
#               ^^ source.ts meta.embedded.block.graphql entity.name.function.graphql
#                 ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                  ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                   ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                    ^^^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql variable.graphql
#                        ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                         ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                          ^^^ source.ts
>
>gql(`
#^^^^^ source.ts
>  query Q4 {
#^^ source.ts meta.embedded.block.graphql
#  ^^^^^ source.ts meta.embedded.block.graphql keyword.operation.graphql
#       ^ source.ts meta.embedded.block.graphql
#        ^^ source.ts meta.embedded.block.graphql entity.name.function.graphql
#          ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#           ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
>    test
#^^^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#    ^^^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql variable.graphql
>  }
#^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#  ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
>`);
#^^ source.ts
#  ^ source.ts punctuation.terminator.statement.ts
>
>// prettier-ignore
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>gql (  `
#^^^^^^^^ source.ts
>  query Q5 {
#^^ source.ts meta.embedded.block.graphql
#  ^^^^^ source.ts meta.embedded.block.graphql keyword.operation.graphql
#       ^ source.ts meta.embedded.block.graphql
#        ^^ source.ts meta.embedded.block.graphql entity.name.function.graphql
#          ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#           ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
>    test
#^^^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#    ^^^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql variable.graphql
>  }
#^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#  ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
>` );
#^^^ source.ts
#   ^ source.ts punctuation.terminator.statement.ts
>
>// syntax highlighting cannot work in all examples after this - textmate grammars don't work over multiple lines like this
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>
>gql<
#^^^ source.ts variable.other.readwrite.ts
#   ^ source.ts keyword.operator.relational.ts
>  {
#^^ source.ts
#  ^ source.ts meta.block.ts punctuation.definition.block.ts
>    test: string;
#^^^^ source.ts meta.block.ts
#    ^^^^ source.ts meta.block.ts entity.name.label.ts
#        ^ source.ts meta.block.ts punctuation.separator.label.ts
#         ^ source.ts meta.block.ts
#          ^^^^^^ source.ts meta.block.ts variable.other.readwrite.ts
#                ^ source.ts meta.block.ts punctuation.terminator.statement.ts
>  },
#^^ source.ts meta.block.ts
#  ^ source.ts meta.block.ts punctuation.definition.block.ts
#   ^ source.ts punctuation.separator.comma.ts
>  {
#^^ source.ts
#  ^ source.ts meta.block.ts punctuation.definition.block.ts
>    test: string;
#^^^^ source.ts meta.block.ts
#    ^^^^ source.ts meta.block.ts entity.name.label.ts
#        ^ source.ts meta.block.ts punctuation.separator.label.ts
#         ^ source.ts meta.block.ts
#          ^^^^^^ source.ts meta.block.ts variable.other.readwrite.ts
#                ^ source.ts meta.block.ts punctuation.terminator.statement.ts
>  }
#^^ source.ts meta.block.ts
#  ^ source.ts meta.block.ts punctuation.definition.block.ts
>>(`
#^ source.ts keyword.operator.relational.ts
# ^ source.ts meta.brace.round.ts
#  ^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
>  query Q6 {
#^^^^^^^^^^^^^ source.ts string.template.ts
>    test
#^^^^^^^^^ source.ts string.template.ts
>  }
#^^^^ source.ts string.template.ts
>`);
#^ source.ts string.template.ts punctuation.definition.string.template.end.ts
# ^ source.ts meta.brace.round.ts
#  ^ source.ts punctuation.terminator.statement.ts
>
>// prettier-ignore
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>gql(
#^^^ source.ts meta.function-call.ts entity.name.function.ts
#   ^ source.ts meta.brace.round.ts
>`
#^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
>  query Q7 {
#^^^^^^^^^^^^^ source.ts string.template.ts
>    test
#^^^^^^^^^ source.ts string.template.ts
>  }
#^^^^ source.ts string.template.ts
>`
#^ source.ts string.template.ts punctuation.definition.string.template.end.ts
>);
#^ source.ts meta.brace.round.ts
# ^ source.ts punctuation.terminator.statement.ts
>
>gql<SomeResult, SomeVariables>(
#^^^ source.ts meta.function-call.ts entity.name.function.ts
#   ^ source.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
#    ^^^^^^^^^^ source.ts meta.type.parameters.ts entity.name.type.ts
#              ^ source.ts meta.type.parameters.ts punctuation.separator.comma.ts
#               ^ source.ts meta.type.parameters.ts
#                ^^^^^^^^^^^^^ source.ts meta.type.parameters.ts entity.name.type.ts
#                             ^ source.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
#                              ^ source.ts meta.brace.round.ts
>  // ts-ignore
#^^ source.ts punctuation.whitespace.comment.leading.ts
#  ^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#    ^^^^^^^^^^ source.ts comment.line.double-slash.ts
>  `
#^^ source.ts
#  ^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
>  query Q8 {
#^^^^^^^^^^^^^ source.ts string.template.ts
>    test
#^^^^^^^^^ source.ts string.template.ts
>  }
#^^^^ source.ts string.template.ts
>`,
#^ source.ts string.template.ts punctuation.definition.string.template.end.ts
# ^ source.ts punctuation.separator.comma.ts
>  `query {}`,
#^^ source.ts
#  ^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
#   ^^^^^^^^ source.ts string.template.ts
#           ^ source.ts string.template.ts punctuation.definition.string.template.end.ts
#            ^ source.ts punctuation.separator.comma.ts
>);
#^ source.ts meta.brace.round.ts
# ^ source.ts punctuation.terminator.statement.ts
>
>// prettier-ignore
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>gql<{
#^^^ source.ts meta.function-call.ts entity.name.function.ts
#   ^ source.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
#    ^ source.ts meta.type.parameters.ts meta.object.type.ts punctuation.definition.block.ts
>  test: string;
#^^ source.ts meta.type.parameters.ts meta.object.type.ts meta.field.declaration.ts
#  ^^^^ source.ts meta.type.parameters.ts meta.object.type.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
#      ^ source.ts meta.type.parameters.ts meta.object.type.ts meta.field.declaration.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
#       ^ source.ts meta.type.parameters.ts meta.object.type.ts meta.field.declaration.ts meta.type.annotation.ts
#        ^^^^^^ source.ts meta.type.parameters.ts meta.object.type.ts meta.field.declaration.ts meta.type.annotation.ts support.type.primitive.ts
#              ^ source.ts meta.type.parameters.ts meta.object.type.ts punctuation.terminator.statement.ts
>},{
#^ source.ts meta.type.parameters.ts meta.object.type.ts punctuation.definition.block.ts
# ^ source.ts meta.type.parameters.ts punctuation.separator.comma.ts
#  ^ source.ts meta.type.parameters.ts meta.object.type.ts punctuation.definition.block.ts
>  test: string;
#^^ source.ts meta.type.parameters.ts meta.object.type.ts meta.field.declaration.ts
#  ^^^^ source.ts meta.type.parameters.ts meta.object.type.ts meta.field.declaration.ts meta.definition.property.ts variable.object.property.ts
#      ^ source.ts meta.type.parameters.ts meta.object.type.ts meta.field.declaration.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
#       ^ source.ts meta.type.parameters.ts meta.object.type.ts meta.field.declaration.ts meta.type.annotation.ts
#        ^^^^^^ source.ts meta.type.parameters.ts meta.object.type.ts meta.field.declaration.ts meta.type.annotation.ts support.type.primitive.ts
#              ^ source.ts meta.type.parameters.ts meta.object.type.ts punctuation.terminator.statement.ts
>}>(`query Q9 { test }`)
#^ source.ts meta.type.parameters.ts meta.object.type.ts punctuation.definition.block.ts
# ^ source.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
#  ^ source.ts meta.brace.round.ts
#   ^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
#    ^^^^^^^^^^^^^^^^^ source.ts string.template.ts
#                     ^ source.ts string.template.ts punctuation.definition.string.template.end.ts
#                      ^ source.ts meta.brace.round.ts
>
>// prettier-ignore
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>gql(
#^^^ source.ts meta.function-call.ts entity.name.function.ts
#   ^ source.ts meta.brace.round.ts
>`query Q10 { test }`
#^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
# ^^^^^^^^^^^^^^^^^^ source.ts string.template.ts
#                   ^ source.ts string.template.ts punctuation.definition.string.template.end.ts
>)
#^ source.ts meta.brace.round.ts
>
>// prettier-ignore
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>gql
#^^^ source.ts variable.other.readwrite.ts
>(
#^ source.ts meta.brace.round.ts
>  `query { test }`
#^^ source.ts
#  ^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
#   ^^^^^^^^^^^^^^ source.ts string.template.ts
#                 ^ source.ts string.template.ts punctuation.definition.string.template.end.ts
>  )
#^^ source.ts
#  ^ source.ts meta.brace.round.ts
>
>export {};
#^^^^^^ source.ts meta.export.ts keyword.control.export.ts
#      ^ source.ts meta.export.ts
#       ^ source.ts meta.export.ts meta.block.ts punctuation.definition.block.ts
#        ^ source.ts meta.export.ts meta.block.ts punctuation.definition.block.ts
#         ^ source.ts punctuation.terminator.statement.ts
>