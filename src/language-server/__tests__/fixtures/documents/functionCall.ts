// hint for reading the snapshots generated by this file:
// it is important to check that a rule doesn't only enter `meta.embedded.block.graphql`
// but also leaves it again

declare function gql<A = any, B = any>(arg: string, ...args: any[]): void;
declare function foo<A = any, B = any>(...args: any[]): void;
declare type SomeResult = any;
declare type SomeVariables = any;

// for comparison - this is what a normal function all is colored
foo(`query Foo { test }`);

// if possible, these should look the same
foo("notATemplate");
gql("notATemplate");
foo<"">("notATemplate");
gql<"">("notATemplate");

// prettier-ignore
gql(`query Q1($arg: String!) { test }`)

// prettier-ignore
gql<SomeResult, SomeVariables>(`query Q2 { test }`)

// prettier-ignore
gql  (  `query Q3 { test }` )

gql(`
  query Q4 {
    test
  }
`);

// prettier-ignore
gql (  `
  query Q5 {
    test
  }
` );

// syntax highlighting cannot work in all examples after this - textmate grammars don't work over multiple lines like this

gql<
  {
    test: string;
  },
  {
    test: string;
  }
>(`
  query Q6 {
    test
  }
`);

// prettier-ignore
gql(
`
  query Q7 {
    test
  }
`
);

gql<SomeResult, SomeVariables>(
  // ts-ignore
  `
  query Q8 {
    test
  }
`,
  `query {}`,
);

// prettier-ignore
gql<{
  test: string;
},{
  test: string;
}>(`query Q9 { test }`)

// prettier-ignore
gql(
`query Q10 { test }`
)

// prettier-ignore
gql
(
  `query Q11 { test }`
  )

export {};
