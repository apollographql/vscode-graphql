# use 'js-yaml' to convert to json
# npx js-yaml syntaxes/connectors.jsonselection.yaml >| syntaxes/connectors.jsonselection.json
name: "Apollo Connectors JSONSelection"
scopeName: "source.apollo.jsonselection"
patterns:
  - include: "#JSONSelection"
  - include: "source.graphql#graphql-skip-newlines"
repository:
  # JSONSelection        ::= PathSelection | NamedSelection*
  JSONSelection:
    name: "meta.JSONSelection"
    patterns:
      - include: "#VarPath" #temp
      #- include: "#PathSelection"
      - include: "#NamedSelection"
  # SubSelection         ::= "{" NamedSelection* "}"
  SubSelection:
    name: "meta.SubSelection"
    begin: "\\s*({)"
    beginCaptures:
      "1":
        name: "punctuation.SubSelection.open"
    end: "\\s*(})"
    endCaptures:
      "1":
        name: "punctuation.SubSelection.close"
    patterns:
      - include: "#NamedSelection"
  # NamedSelection       ::= NamedPathSelection | PathWithSubSelection | NamedFieldSelection | NamedGroupSelection
  NamedSelection:
    name: "meta.NamedSelection"
    patterns:
      #      - include: "#PathWithSubSelection"
      - include: "#NamedFieldSelection"
      - include: "#NamedPathSelection"
  #      - include: "#NamedGroupSelection"
  # NamedPathSelection   ::= Alias PathSelection
  NamedPathSelection:
    begin: "\\b([a-zA-Z][0-9a-zA-Z_]*)\\s*(:)"
    beginCaptures:
      "1":
        name: "string.unquoted.NamedPathSelection.alias"
      "2":
        name: "punctuation.colon.NamedPathSelection"
    end: "(?=.)"
    applyEndPatternLast: 1,
    patterns:
      - include: "#PathSelection"
  # NamedFieldSelection  ::= Alias? Key SubSelection?
  NamedFieldSelection:
    begin: "\\b(?:([a-zA-Z][0-9a-zA-Z_]*)\\s*(:))?\\s*([a-zA-Z][0-9a-zA-Z_]*)\\b(?!\\s*:)"
    beginCaptures:
      "1":
        name: "string.unquoted.NamedFieldSelection.alias"
      "2":
        name: "punctuation.colon.NamedFieldSelection"
      "3":
        name: "variable.NamedFieldSelection.key"
    end: "(?=.)"
    applyEndPatternLast: 1,
    patterns:
      - include: "#SubSelection"
  # NamedGroupSelection  ::= Alias SubSelection
  # Alias                ::= Key ":"
  # Path                 ::= VarPath | KeyPath | AtPath | ExprPath
  # PathSelection        ::= Path SubSelection?
  # PathWithSubSelection ::= Path SubSelection
  PathSelection:
    patterns:
      - include: "#PathWithOrWithoutSubSelection"
  PathWithSubSelection:
    patterns:
      - include: "#PathWithOrWithoutSubSelection"
  PathWithOrWithoutSubSelection:
    patterns:
      - include: "#VarPath"
      #- include: "#KeyPath"
      #- include: "#AtPath"
      #- include: "#ExprPath"
  # VarPath              ::= "$" (NO_SPACE Identifier)? PathStep*
  VarPath:
    begin: "(\\$)([a-zA-Z][0-9a-zA-Z_]*)?\\b"
    beginCaptures:
      "1":
        name: "variable.VarPath.language"
      "2":
        name: "variable.VarPath.identifier"
    end: "(?=.)"
    applyEndPatternLast: 1,
    patterns:
      - include: "#PathStep"
  # KeyPath              ::= Key PathStep+
  # AtPath               ::= "@" PathStep*
  # ExprPath             ::= "$(" LitExpr ")" PathStep*
  # PathStep             ::= "." Key | "->" Identifier MethodArgs?
  PathStep:
    begin: "(\\.)([a-zA-Z][0-9a-zA-Z_]*|\"[^\"]*\"|'[^']*')|(->)([a-zA-Z][0-9a-zA-Z_]*)"
    end: "(?=.)"
    applyEndPatternLast: 1,
    beginCaptures:
      "1":
        name: "punctuation.PathStep.dot"
      "2":
        name: "variable.PathStep.key.identifier"
      "3":
        name: "punctuation.PathStep.arrow"
      "4":
        name: "variable.PathStep.identifier"
    patterns:
      - include: "#MethodArgs"
  # Key                  ::= Identifier | LitString
  # Identifier           ::= [a-zA-Z_] NO_SPACE [0-9a-zA-Z_]*
  # MethodArgs           ::= "(" (LitExpr ("," LitExpr)* ","?)? ")"
  MethodArgs:
    begin: "\\s*(\\()"
    beginCaptures:
      "1":
        name: "punctuation.brace.round.MethodArgs.open"
    end: "\\s*(\\))"
    endCaptures:
      "1":
      name: "punctuation.brace.round.MethodArgs.close"
  # LitExpr              ::= LitPrimitive | LitObject | LitArray | PathSelection
  # LitPrimitive         ::= LitString | LitNumber | "true" | "false" | "null"
  # LitString            ::= "'" ("\\'" | [^'])* "'" | '"' ('\\"' | [^"])* '"'
  # LitNumber            ::= "-"? ([0-9]+ ("." [0-9]*)? | "." [0-9]+)
  # LitObject            ::= "{" (LitProperty ("," LitProperty)* ","?)? "}"
  # LitProperty          ::= Key ":" LitExpr
  # LitArray             ::= "[" (LitExpr ("," LitExpr)* ","?)? "]"
  # NO_SPACE             ::= !SpacesOrComments
  # SpacesOrComments     ::= (Spaces | Comment)+
  # Spaces               ::= ("‚éµ" | "\t" | "\r" | "\n")+
  # Comment              ::= "#" [^\n]*
