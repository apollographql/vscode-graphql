>// hint for reading the snapshots generated by this file:
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>// it is important to check that a rule doesn't only enter `meta.embedded.block.graphql`
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>// but also leaves it again
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>
>/* NormalComment */ `query Foo {test}`;
#^^ source.ts comment.block.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^ source.ts comment.block.ts
#                 ^^ source.ts comment.block.ts punctuation.definition.comment.ts
#                   ^ source.ts
#                    ^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
#                     ^^^^^^^^^^^^^^^^ source.ts string.template.ts
#                                     ^ source.ts string.template.ts punctuation.definition.string.template.end.ts
#                                      ^ source.ts punctuation.terminator.statement.ts
>
>// prettier-ignore
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>{
#^ source.ts meta.block.ts punctuation.definition.block.ts
>const _1 = /* GraphQL */`query Q1 {test}`;
#^^^^^ source.ts meta.block.ts meta.var.expr.ts storage.type.ts
#     ^ source.ts meta.block.ts meta.var.expr.ts
#      ^^ source.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
#        ^ source.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
#         ^ source.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
#          ^ source.ts meta.block.ts meta.var.expr.ts
#           ^^^ source.ts meta.block.ts meta.var.expr.ts
#              ^^^^^^^ source.ts meta.block.ts meta.var.expr.ts markup.italic
#                     ^^^^ source.ts meta.block.ts meta.var.expr.ts
#                         ^^^^^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql keyword.operation.graphql
#                              ^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql
#                               ^^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql entity.name.function.graphql
#                                 ^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql
#                                  ^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                                   ^^^^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql variable.graphql
#                                       ^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                                        ^ source.ts meta.block.ts meta.var.expr.ts
#                                         ^ source.ts meta.block.ts punctuation.terminator.statement.ts
>const _2 =
#^^^^^ source.ts meta.block.ts meta.var.expr.ts storage.type.ts
#     ^ source.ts meta.block.ts meta.var.expr.ts
#      ^^ source.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
#        ^ source.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
#         ^ source.ts meta.block.ts meta.var.expr.ts keyword.operator.assignment.ts
>/* GraphQL */`
#^^^ source.ts meta.block.ts meta.var.expr.ts
#   ^^^^^^^ source.ts meta.block.ts meta.var.expr.ts markup.italic
#          ^^^^ source.ts meta.block.ts meta.var.expr.ts
>query Q2 {
#^^^^^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql keyword.operation.graphql
#     ^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql
#      ^^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql entity.name.function.graphql
#        ^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql
#         ^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
>  test
#^^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql
#  ^^^^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql variable.graphql
>}
#^ source.ts meta.block.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
>`;
#^ source.ts meta.block.ts meta.var.expr.ts
# ^ source.ts meta.block.ts punctuation.terminator.statement.ts
>}
#^ source.ts meta.block.ts punctuation.definition.block.ts
>
>/* GraphQL */ `query Q3 {test}`;
#^^^ source.ts
#   ^^^^^^^ source.ts markup.italic
#          ^^^^^ source.ts
#               ^^^^^ source.ts meta.embedded.block.graphql keyword.operation.graphql
#                    ^ source.ts meta.embedded.block.graphql
#                     ^^ source.ts meta.embedded.block.graphql entity.name.function.graphql
#                       ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                        ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                         ^^^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql variable.graphql
#                             ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                              ^ source.ts
#                               ^ source.ts punctuation.terminator.statement.ts
>/*GraphQL*/ `query Q4 {test}`;
#^^ source.ts
#  ^^^^^^^ source.ts markup.italic
#         ^^^^ source.ts
#             ^^^^^ source.ts meta.embedded.block.graphql keyword.operation.graphql
#                  ^ source.ts meta.embedded.block.graphql
#                   ^^ source.ts meta.embedded.block.graphql entity.name.function.graphql
#                     ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                      ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                       ^^^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql variable.graphql
#                           ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                            ^ source.ts
#                             ^ source.ts punctuation.terminator.statement.ts
>/** GraphQL */ `query Q5 {test}`;
#^^^^ source.ts
#    ^^^^^^^ source.ts markup.italic
#           ^^^^^ source.ts
#                ^^^^^ source.ts meta.embedded.block.graphql keyword.operation.graphql
#                     ^ source.ts meta.embedded.block.graphql
#                      ^^ source.ts meta.embedded.block.graphql entity.name.function.graphql
#                        ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql
#                         ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                          ^^^^ source.ts meta.embedded.block.graphql meta.selectionset.graphql variable.graphql
#                              ^ source.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
#                               ^ source.ts
#                                ^ source.ts punctuation.terminator.statement.ts
>
>const _3 = /* GraphQL */ `
#^^^^^ source.ts meta.var.expr.ts storage.type.ts
#     ^ source.ts meta.var.expr.ts
#      ^^ source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts variable.other.constant.ts
#        ^ source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
#         ^ source.ts meta.var.expr.ts keyword.operator.assignment.ts
#          ^ source.ts meta.var.expr.ts
#           ^^^ source.ts meta.var.expr.ts
#              ^^^^^^^ source.ts meta.var.expr.ts markup.italic
#                     ^^^^^ source.ts meta.var.expr.ts
>  query Q6 {
#^^ source.ts meta.var.expr.ts meta.embedded.block.graphql
#  ^^^^^ source.ts meta.var.expr.ts meta.embedded.block.graphql keyword.operation.graphql
#       ^ source.ts meta.var.expr.ts meta.embedded.block.graphql
#        ^^ source.ts meta.var.expr.ts meta.embedded.block.graphql entity.name.function.graphql
#          ^ source.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql
#           ^ source.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
>    test
#^^^^ source.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql
#    ^^^^ source.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql variable.graphql
>  }
#^^ source.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql
#  ^ source.ts meta.var.expr.ts meta.embedded.block.graphql meta.selectionset.graphql punctuation.operation.graphql
>`;
#^ source.ts meta.var.expr.ts
# ^ source.ts punctuation.terminator.statement.ts
>
>// syntax highlighting cannot work in all examples after this - textmate grammars don't work over multiple lines like this
#^^ source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.ts comment.line.double-slash.ts
>
>/**
#^^^ source.ts comment.block.documentation.ts punctuation.definition.comment.ts
> * GraphQL
#^^^^^^^^^^^ source.ts comment.block.documentation.ts
> */ `query Q7 {test}`;
#^ source.ts comment.block.documentation.ts
# ^^ source.ts comment.block.documentation.ts punctuation.definition.comment.ts
#   ^ source.ts
#    ^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
#     ^^^^^^^^^^^^^^^ source.ts string.template.ts
#                    ^ source.ts string.template.ts punctuation.definition.string.template.end.ts
#                     ^ source.ts punctuation.terminator.statement.ts
>
>/* GraphQL */
#^^ source.ts comment.block.ts punctuation.definition.comment.ts
#  ^^^^^^^^^ source.ts comment.block.ts
#           ^^ source.ts comment.block.ts punctuation.definition.comment.ts
>`query Q8 {test}`;
#^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
# ^^^^^^^^^^^^^^^ source.ts string.template.ts
#                ^ source.ts string.template.ts punctuation.definition.string.template.end.ts
#                 ^ source.ts punctuation.terminator.statement.ts
>
>/* graphql */
#^^ source.ts comment.block.ts punctuation.definition.comment.ts
#  ^^^^^^^^^ source.ts comment.block.ts
#           ^^ source.ts comment.block.ts punctuation.definition.comment.ts
>`query Q9 {test}`;
#^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
# ^^^^^^^^^^^^^^^ source.ts string.template.ts
#                ^ source.ts string.template.ts punctuation.definition.string.template.end.ts
#                 ^ source.ts punctuation.terminator.statement.ts
>
>/* gql */
#^^ source.ts comment.block.ts punctuation.definition.comment.ts
#  ^^^^^ source.ts comment.block.ts
#       ^^ source.ts comment.block.ts punctuation.definition.comment.ts
>`query Q10 {test}`;
#^ source.ts string.template.ts punctuation.definition.string.template.begin.ts
# ^^^^^^^^^^^^^^^^ source.ts string.template.ts
#                 ^ source.ts string.template.ts punctuation.definition.string.template.end.ts
#                  ^ source.ts punctuation.terminator.statement.ts
>