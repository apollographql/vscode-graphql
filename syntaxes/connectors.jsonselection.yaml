# Run `npm run watch:textmate-yaml` while working on this file.
# based on https://github.com/apollographql/router/blob/b0a89c223bb5813239474b336cf335ab4fb586cb/apollo-federation/src/sources/connect/json_selection/README.md
$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: "Apollo Connectors Mapping Syntax"
scopeName: "source.apollo.connectors.mapping"
patterns:
  - include: "#JSONSelection"
  - include: "source.graphql#graphql-skip-newlines"
variables:
  identifier: "[a-zA-Z_][0-9a-zA-Z_]*"
  # prettier-ignore
  string: "(?:\"[^\"]*\"|'[^']*')"
  key: "(?:{{identifier}}|{{string}})"
  alias: "{{key}}\\s*:"
  varPathMatch: "[$]"
  keyPathMatch: "{{key}}\\s[?]? {{pathStepMatch}} [?]?"
  pathStepMatch: "(?:[.]{{key}}|->{{identifier}})"
  atPathMatch: "@"
  exprPathMatch: "$[(]"
repository:
  # JSONSelection        ::= PathSelection | NamedSelection*
  JSONSelection:
    patterns:
      # - include: "#NamedSelection"
      - include: "#PathSelection"
      - include: "#Comment"
  # SubSelection         ::= "{" NamedSelection* "}"
  SubSelection:
    begin: "\\s*({)"
    beginCaptures:
      "1":
        name: "punctuation.selection.open"
    end: "\\s*(})"
    endCaptures:
      "1":
        name: "punctuation.selection.close"
    patterns:
      - include: "#NamedSelection"
      - include: "#Comment"
  # NamedSelection       ::= (Alias | "...")? PathSelection | Alias SubSelection
  NamedSelection:
    patterns: []
  # Alias                ::= Key ":"
  # Path                 ::= VarPath | KeyPath | AtPath | ExprPath
  PathSelection:
    patterns:
      - include: "#PathWithOrWithoutSubSelection"
  PathWithSubSelection:
    patterns:
      - include: "#PathWithOrWithoutSubSelection"
  PathWithOrWithoutSubSelection:
    begin: "(?={{varPathMatch}}|{{keyPathMatch}}|{{atPathMatch}}|{{exprPathMatch}})"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - include: "#VarPath"
      - include: "#KeyPath"
      - include: "#AtPath"
      - include: "#ExprPath"
  # PathSelection        ::= Path SubSelection?
  # VarPath              ::= "$" (NO_SPACE Identifier)? PathTail
  VarPath:
    begin: "([$])({{identifier}})?(?!\\w)"
    beginCaptures:
      "1":
        name: "variable.language.path.dollar"
      "2":
        name: "variable.language.path.identifier"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - include: "#PathTail"
  # KeyPath              ::= Key NonEmptyPathTail
  KeyPath:
    begin: '({{key}})\s*(?={{pathStepMatch}})'
    beginCaptures:
      "1":
        name: "variable.path.key.identifier"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      # "nonEmpty" part already covered through `(?={{pathStepMatch}})` in `begin`
      #- include: "#NonEmptyPathTail"
      - include: "#PathTail"
  # AtPath               ::= "@" PathTail
  AtPath:
    begin: "(@)"
    beginCaptures:
      "1":
        name: "variable.language.path.at"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - include: "#PathTail"
  # ExprPath             ::= "$(" LitExpr ")" PathTail
  ExprPath:
    begin: "([$])(?=[(])"
    beginCaptures:
      "1":
        name: "variable.language.path.dollar"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - begin: "([(])"
        beginCaptures:
          "1":
            name: "punctuation.brace.round.args.open"
        end: "([)])"
        endCaptures:
          "1":
            name: "punctuation.brace.round.args.close"
        patterns:
          - include: "#LitExpr"
      - include: "#PathStep"
  # PathTail             ::= "?"? (PathStep "?"?)*
  PathTail:
    begin: "([?])?\\s*{{pathStepMatch}}"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - include: "#PathStepMaybOptionallyChained"
  PathStepMaybOptionallyChained:
    begin: "(?=[.])({{key}})|(->)({{identifier}})"
    end: "([?])?"
    endCaptures:
      "1":
        name: "variable.dot"
    applyEndPatternLast: 1
    patterns:
      - include: "#PathStep"
  # NonEmptyPathTail     ::= "?"? (PathStep "?"?)+
  # PathStep             ::= "." Key | "->" Identifier MethodArgs?
  PathStep:
    begin: "([.])({{key}})|(->)({{identifier}})"
    end: "(?=.)"
    applyEndPatternLast: 1
    beginCaptures:
      "1":
        name: "variable.dot"
      "2":
        name: "variable.key.identifier"
      "3":
        name: "punctuation.arrow"
      "4":
        name: "variable.identifier"
    patterns:
      - include: "#MethodArgs"
  # Key                  ::= Identifier | LitString
  # Identifier           ::= [a-zA-Z_] NO_SPACE [0-9a-zA-Z_]*
  # MethodArgs           ::= "(" (LitExpr ("," LitExpr)* ","?)? ")"
  MethodArgs:
    begin: "([(])"
    beginCaptures:
      "1":
        name: "punctuation.brace.round.args.open"
    end: "([)])"
    endCaptures:
      "1":
        name: "punctuation.brace.round.args.close"
    patterns:
      - include: "#LitExpr"
      - match: ","
        name: "punctuation.comma.args.separator"
  # LitExpr              ::= LitPath | LitOpChain | LitPrimitive | LitObject | LitArray | PathSelection
  # changed to:
  # LitExpr              ::= LitPrimitivePathOrChain | LitObjectPathOrChain  | LitArrayPathOrChain | PathSelection
  LitExpr:
    patterns: [] #TODO
  # LitPath              ::= (LitPrimitive | LitObject | LitArray) NonEmptyPathTail
  # LitOpChain           ::= LitExpr LitOp LitExpr
  # LitPrimitive         ::= LitString | LitNumber | "true" | "false" | "null"
  LitPrimitive:
    patterns:
      - include: "#LitString"
      - include: "#LitNumber"
      - match: "\\b(true|false|null)\\b"
        name: "constant.language.LitPrimitive"
  # LitString            ::= "'" ("\\'" | [^'])* "'" | '"' ('\\"' | [^"])* '"'
  LitString:
    name: "string.quoted"
    # prettier-ignore
    match: "(\")([^\"]*)(\")|(')([^']*)(')"
  # LitNumber            ::= "-"? ([0-9]+ ("." [0-9]*)? | "." [0-9]+)
  LitNumber:
    name: "constant.numeric"
    match: "\\b-?([0-9]+([.][0-9]*)?|[.][0-9]+)\\b"
  # LitObject            ::= "{" (LitProperty ("," LitProperty)* ","?)? "}"
  LitObject:
    begin: "\\s*({)"
    beginCaptures:
      "1":
        name: "punctuation.object.open"
    end: "\\s*(})"
    endCaptures:
      "1":
        name: "punctuation.object.close"
    patterns:
      - include: "#LitProperty"
      - match: ","
        name: "punctuation.comma.object.separator"
  # LitProperty          ::= Key ":" LitExpr
  LitProperty:
    begin: "\\b({{identifier}})\\s*(:)\\s*"
    beginCaptures:
      "1":
        name: "variable.property.key"
      "2":
        name: "punctuation.colon.property"
    end: "(?=.)"
    applyEndPatternLast: 1
    patterns:
      - include: "#LitExpr"
  # LitArray             ::= "[" (LitExpr ("," LitExpr)* ","?)? "]"
  LitArray:
    begin: "\\s*(\\[)"
    beginCaptures:
      "1":
        name: "punctuation.array.open"
    end: "\\s*(\\])"
    endCaptures:
      "1":
        name: "punctuation.array.close"
    patterns:
      - include: "#LitExpr"
      - match: ","
        name: "punctuation.comma.array.separator"
  # LitOp                ::= "??" | "?!" | "&&" | "||" | "==" | "!=" | "<" | "<=" | ">" | ">=" | +" | "-" | "*" | "/" | "%"
  LitOp:
    match: "([?][?]|[?][!]|&&|[|][|]|==|!=|<|<=|>|>=|[+]|-|[*]|/|%)"
    name: "keyword.operator"
  # NO_SPACE             ::= !SpacesOrComments
  # SpacesOrComments     ::= (Spaces | Comment)+
  # Spaces               ::= ("‚éµ" | "\t" | "\r" | "\n")+
  # Comment              ::= "#" [^\n]*
  Comment:
    name: "comment.line.jsonselection"
    match: "(\\s*)(#).*"
    captures:
      "1":
        name: "punctuation.whitespace.comment.leading.jsonselection"

  # additional rules used for strings, e.g. in `POST: "/foo/bar/{$id}"`
  JSONSelectionString:
    contentName: string.quoted
    begin: '(("))'
    beginCaptures:
      "1":
        name: "string.quoted.double.graphql"
      "2":
        name: "punctuation.definition.string.begin.graphql"
    end: '(("))'
    endCaptures:
      "1":
        name: "string.quoted.double.graphql"
      "2":
        name: "punctuation.definition.string.end.graphql"
    patterns:
      - begin: "\\s*({)"
        contentName: "embedded"
        debugName: "embedded"
        beginCaptures:
          "1":
            name: "punctuation.embedded.open"
        end: "\\s*(})"
        endCaptures:
          "1":
            name: "punctuation.embedded.close"
        patterns:
          - include: "#PathSelection"
