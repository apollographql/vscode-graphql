# use 'js-yaml' to convert to json
# npx js-yaml syntaxes/connectors.jsonselection.yaml >| syntaxes/connectors.jsonselection.json
name: "Apollo Connectors JSONSelection"
scopeName: "source.apollo.jsonselection"
patterns:
  - include: "#JSONSelection"
  - include: "source.graphql#graphql-skip-newlines"
repository:
  # JSONSelection        ::= PathSelection | NamedSelection*
  JSONSelection:
    name: "meta.JSONSelection"
    patterns:
      #      - include: "#PathSelection"
      - include: "#NamedSelection"
  # SubSelection         ::= "{" NamedSelection* "}"
  SubSelection:
    name: "meta.SubSelection"
    begin: "\\s*({)"
    beginCaptures:
      "0":
        name: "punctuation.SubSelection.open"
    end: "\\s*(})"
    endCaptures:
      "0":
        name: "punctuation.SubSelection.close"
    patterns:
      - include: "#NamedSelection"
  # NamedSelection       ::= NamedPathSelection | PathWithSubSelection | NamedFieldSelection | NamedGroupSelection
  NamedSelection:
    name: "meta.NamedSelection"
    patterns:
      #      - include: "#NamedPathSelection"
      #      - include: "#PathWithSubSelection"
      - include: "#NamedFieldSelection"
  #      - include: "#NamedGroupSelection"
  # NamedPathSelection   ::= Alias PathSelection
  # NamedFieldSelection  ::= Alias? Key SubSelection?
  NamedFieldSelection:
    begin: "\\b(?:([a-zA-Z][0-9a-zA-Z_]*)\\s*(:))?\\s*([a-zA-Z][0-9a-zA-Z_]*)\\b"
    beginCaptures:
      "1":
        name: "string.unquoted.NamedFieldSelection.alias"
      "2":
        name: "punctuation.colon.NamedFieldSelection"
      "3":
        name: "variable.NamedFieldSelection.key"
    end: "(?=.)"
    applyEndPatternLast: 1,
    patterns:
      - include: "#SubSelection"
# NamedGroupSelection  ::= Alias SubSelection
# Alias                ::= Key ":"
# Path                 ::= VarPath | KeyPath | AtPath | ExprPath
# PathSelection        ::= Path SubSelection?
# PathWithSubSelection ::= Path SubSelection
# VarPath              ::= "$" (NO_SPACE Identifier)? PathStep*
# KeyPath              ::= Key PathStep+
# AtPath               ::= "@" PathStep*
# ExprPath             ::= "$(" LitExpr ")" PathStep*
# PathStep             ::= "." Key | "->" Identifier MethodArgs?
# Key                  ::= Identifier | LitString
# Identifier           ::= [a-zA-Z_] NO_SPACE [0-9a-zA-Z_]*
# MethodArgs           ::= "(" (LitExpr ("," LitExpr)* ","?)? ")"
# LitExpr              ::= LitPrimitive | LitObject | LitArray | PathSelection
# LitPrimitive         ::= LitString | LitNumber | "true" | "false" | "null"
# LitString            ::= "'" ("\\'" | [^'])* "'" | '"' ('\\"' | [^"])* '"'
# LitNumber            ::= "-"? ([0-9]+ ("." [0-9]*)? | "." [0-9]+)
# LitObject            ::= "{" (LitProperty ("," LitProperty)* ","?)? "}"
# LitProperty          ::= Key ":" LitExpr
# LitArray             ::= "[" (LitExpr ("," LitExpr)* ","?)? "]"
# NO_SPACE             ::= !SpacesOrComments
# SpacesOrComments     ::= (Spaces | Comment)+
# Spaces               ::= ("‚éµ" | "\t" | "\r" | "\n")+
# Comment              ::= "#" [^\n]*
